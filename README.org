#+title: Exwm Configuration
#+author: Jom Dollesin

* Desktop File

This file is used by your =login manager= to display EXWM as a desktop environment option when you log in.

*NOTE*: Make sure you create a symbolic link for this file into =/usr/share/xsessions=:

#+begin_src sh :tangle no

  sudo ln -f ~/.emacs.d/exwm/EXWM.desktop /usr/share/xsessions/EXWM.desktop

#+end_src

#+begin_src sh :tangle ./exwm/EXWM.desktop :mkdirp yes

  [Desktop Entry]
  Name=EXWM
  Comment=Emacs Window Manager
  Exec=sh /home/jd/.emacs.d/exwm/launch.sh
  TryExec=sh
  Type=Application
  X-LightDM-DesktopName=exwm
  DesktopNames=exwm

#+end_src

** Launcher Script

This launcher script is invoked by =EXWM.desktop= to start Emacs and load your desktop environment configuration.

#+begin_src sh :tangle ./exwm/launch.sh

  #!/bin/sh

  # Fire it up
  exec dbus-launch --exit-with-session emacs -mm --debug-init -l ~/.emacs.d/desktop.el


#+end_src

** Keybinding

To create a keybinding with an easy config file let's use =sxhkd=.

#+begin_src sh :tangle ./exwm/sxhkdrc

  # multimedia keys
  super + Up
    $HOME/.local/bin/changevolume up

  super + Down
    $HOME/.local/bin/changevolume down

  super + Right
    $HOME/.local/bin/changebrightness up

  super + Left
    $HOME/.local/bin/changebrightness down

  # program launcher
  super + d
    rofi -show drun

  # lockscreen
  super + shift + l
    betterlockscreens -l

  # browser
  super + b
    vimb

  # file manager
  super + shift + f
    pcmanfm

	# screenshot
  ctrl + Return
    scrot 'screenshot-%s.jpg' -e 'mv $f $$(xdg-user-dir PICTURES)'

#+end_src

** Window Manager

We use the excellent [[https://github.com/ch11ng/exwm][EXWM]] module as the basis for our Emacs Desktop Environment. The [[https://github.com/ch11ng/exwm/wiki][EXWM wiki]] is a great place to find tips about how to configure everything!

#+begin_src emacs-lisp :tangle ./desktop.el

  (defun jd/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defvar jd/sxhkd-process nil)
  (defun jd/run-sxhkd ()
    (interactive)
    (setq jd/sxhkd-process
          (start-process-shell-command
           "sxhkd" nil "sxhkd -c ~/.emacs.d/exwm/sxhkdrc")))

  (defun jd/update-wallpaper ()
    (interactive)
    (start-process-shell-command
     "nitrogen" nil
     (format "nitrogen --set-scaled ~/.emacs.d/pics/wall.jpg")))

  (defun jd/exwm-init-hook ()
    (exwm-workspace-switch-create 1)
    (jd/update-wallpaper)
    (jd/run-sxhkd)
    (jd/start-panel))

  (defun jd/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (defun jd/exwm-update-title ()
    (pcase exwm-class-name
      ("Vimb" (exwm-workspace-rename-buffer (format "vimb: %s" exwm-title)))
      ("qutebrowser" (exwm-workspace-rename-buffer (format "qutebrowser: %s" exwm-title)))))

  (defun jd/configure-window-by-class ()
    (interactive)
    (pcase exwm-class-name
     ("Vimb" (exwm-workspace-move-window 2))
     ("qutebrowser" (exwm-workspace-move-window 2))
     ("mpv" (exwm-floating-toggle-floating)
            (exwm-layout-toggle-mode-line))
     ("sxiv" (exwm-floating-toggle-floating)
            (exwm-layout-toggle-mode-line))))

  (use-package exwm
    :config
    (setq exwm-workspace-number 5)
    (add-hook 'exwm-update-class-hook #'jd/exwm-update-class)
    (add-hook 'exwm-init-hook #'jd/exwm-init-hook)
    (add-hook 'exwm-update-title-hook #'jd/exwm-update-title)
    (add-hook 'exwm-manage-finish-hook #'jd/configure-window-by-class)
    (require 'exwm-randr)
    (exwm-randr-enable)
    (start-process-shell-command
     "xrandr" nil "xrandr --output eDP-1 --mode 1366x768 --pos 0x0 --rotate normal")
    ;;(require 'exwm-systemtray)
    ;;(exwm-systemtray-enable)
    (setq exwm-input-prefix-keys
      '(?\C-x
        ?\C-u
        ?\C-h
        ?\M-x
        ?\M-`
        ?\M-&
        ?\M-:
        ?\C-\M-j  ;; Buffer list
        ?\C-\ ))  ;; Ctrl+Space
    (define-key exwm-mode-map [?\C-q] `exwm-input-send-next-key)
    (setq exwm-input-global-keys
          `(
            ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
            ([?\s-r] . exwm-reset)

            ;; Exwm-keybindings
            ([?\s-f] . exwm-layout-set-fullscreen)
            ([?\s-F] . exwm-floating-toggle-floating)
            ([?\s-s] . split-window-right)
            ([?\s-S] . split-window-below)

            ;; Move between windows
            ([?\s-j] . windmove-left)
            ([?\s-k] . windmove-right)
            ([?\s-K] . windmove-up)
            ([?\s-J] . windmove-down)

            ;; Launch applications via shell command
            ([?\s-!] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)
            ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

            ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))))

    (exwm-input-set-key (kbd "s-s") 'split-window-right)
    (exwm-input-set-key (kbd "s-t") '+vterm/here)
    (exwm-input-set-key (kbd "C-M-j") 'counsel-switch-buffer)
    (exwm-input-set-key (kbd "s-q") 'kill-current-buffer)

    (exwm-enable))

#+end_src

** Polybar

Polybar provides a great, minimalistic panel for you EXWM desktop configuration. The following config integrates =emacsclient= and Polybar with =polybar-msg= to enable you to gather any information from Emacs and display it in the panel!

Check out the Polybar wiki for more details on how to configure it: [[https://github.com/polybar/polybar/wiki]]

#+begin_src emacs-lisp :tangle ./desktop.el

  (defvar jd/polybar-process nil)

  (defun jd/kill-panel ()
    (interactive )
    (when jd/polybar-process
      (ignore-errors
        (kill-process jd/polybar-process)))
    (setq jd/polybar-process nil))

  (defun jd/start-panel ()
    (interactive)
    (jd/kill-panel)
    (setq jd/polybar-process (start-process-shell-command "polybar" nil "polybar setexwm")))

  (defun jd/send-polybar-hook (module-name hook-index)
    (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

  (defun jd/update-polybar-exwm (&optional path)
    (jd/send-polybar-hook "exwm-workspace" 1))

  (defun jd/polybar-exwm-workspace ()
    (pcase exwm-workspace-current-index
      (0 "ðŸ’€")
      (1 "ðŸ”¥")
      (2 "ðŸ“¡")
      (3 "âœ¨")
      (4 "ðŸ’£")))

  (add-hook 'exwm-workspace-switch-hook #'jd/update-polybar-exwm)

#+end_src
